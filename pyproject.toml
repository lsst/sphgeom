[build-system]
requires = [
    "setuptools",
    "lsst-versions >= 1.3.0",
    "wheel",
    "pybind11 >= 2.5.0",
    "numpy >= 1.18",
]
build-backend = "setuptools.build_meta"

[project]
name = "lsst-sphgeom"
description = "A spherical geometry library."
requires-python = ">=3.10.0"
license = {text = "BSD 3-Clause License"}
readme = "README.md"
authors = [
    {name="Rubin Observatory Data Management", email="dm-admin@lists.lsst.org"},
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Astronomy",
]
keywords = ["lsst"]
dependencies = [
   "numpy >=1.18",
   "hpgeom >=0.8.0"
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/lsst/sphgeom"

[project.optional-dependencies]
test = [
    "pytest >= 3.2",
]
yaml = ["pyyaml >= 5.1"]

[tool.setuptools.packages.find]
where = ["python"]

[tool.setuptools]
zip-safe = false
license-files = ["COPYRIGHT", "LICENSE", "bsd_license.txt", "gpl-v3.0.txt"]

[tool.setuptools.dynamic]
version = { attr = "lsst_versions.get_lsst_version" }

[tool.black]
line-length = 110
target-version = ["py310"]

[tool.isort]
profile = "black"
line_length = 110
known_first_party = ["lsst"]

[tool.lsst_versions]
write_to = "python/lsst/sphgeom/version.py"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib"  # Recommended as best practice

[tool.pydocstyle]
convention = "numpy"
# Our coding style does not require docstrings for magic methods (D105)
# Our docstyle documents __init__ at the class level (D107)
# We allow methods to inherit docstrings and this is not compatible with D102.
# Docstring at the very first line is not required
# D200, D205 and D400 all complain if the first sentence of the docstring does
# not fit on one line.
add-ignore = ["D107", "D105", "D102", "D100", "D200", "D205", "D400", "D104"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 110
target-version = "py310"
exclude = [
    "__init__.py",
]

[tool.ruff.lint]
ignore = [
    "N802",
    "N803",
    "N806",
    "N812",
    "N815",
    "N816",
    "N999",
    "D107",
    "D105",
    "D102",
    "D104",
    "D100",
    "D200",
    "D205",
]
select = [
    "E",  # pycodestyle
    "F",  # pyflakes
    "N",  # pep8-naming
    "W",  # pycodestyle
    "D",  # pydocstyle
    "UP", # pyupgrade
    "I",  # isort
    "RUF022",  # sort __all__
    "B",  # bugbear
    "C4",  # comprehensions
]
extend-select = [
    "RUF100", # Warn about unused noqa
]

[tool.ruff.lint.isort]
known-first-party = ["lsst"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 79

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 79
